#!/bin/sh

# [K]2022
# https://github.com/kongfl888

get_cfg_value(){
    v=`uci -q get my-dnshelper.@my-dnshelper[0].$1 2>/dev/null`

    if [ ! -z "$v" ]; then
        echo "$v"
    else
        echo ""
    fi
}

LOCK="/var/lock/my-dnshelper.lock"
SF=$(cd "$(dirname "$0")";pwd)
EA=`get_cfg_value "enable"`
AT=`get_cfg_value "app_test"`
UF=`get_cfg_value "url"`
UA=`get_cfg_value "allowurl"`
UH=`get_cfg_value "hostsurl"`
GH=`get_cfg_value "my_github"`
S=`get_cfg_value "flash"`
AUD=`get_cfg_value "autoupdate"`
UPD=`get_cfg_value "time_update"`
bio=`get_cfg_value "block_ios"`
bga=`get_cfg_value "block_games"`
bsh=`get_cfg_value "block_short"`
bgg=`get_cfg_value "block_google"`
UDH=`get_cfg_value "use_doh"`
dcache=`get_cfg_value "dns_cache"`
hport=`get_cfg_value "doh_port"`
dnssec=`get_cfg_value "use_sec"`
usemul=`get_cfg_value "use_mul"`
forcedoh=`get_cfg_value "force_doh"`
dohhttp=`get_cfg_value "doh_http"`
dohip6=`get_cfg_value "force_ip6"`
dohip4=`get_cfg_value "force_ip4"`
filteraaaa=`get_cfg_value "filter_aaaa"`
dnslogon=`get_cfg_value "dnsmasq_log"`
dnslog=`get_cfg_value "dns_log"`
dnslogsize=`get_cfg_value "dnslog_size"`
dnslogpath=`get_cfg_value "dnslog_path"`
dnsdetect=`get_cfg_value "dns_detect"`
FWI=$(uci -q get firewall.my-dnshelper.path 2>/dev/null)
Logfile="/tmp/my-dnshelper.log"
D="date +'%Y-%m-%d %H:%M:%S'"
RPath="/tmp/my-dnshelper"
DPath="/tmp/dnsmasq.d"
EPath="/etc/my-dnshelper"
LPath="/var/etc/dnsmasq-my-dnshelper.d"
TPath="/tmp/dns_tmp"
helperconf="$DPath/dnsmasq-my-dnshelper.conf"
dnsmasqlog="/var/log/dnsmasq.log"
downloader="curl -kLfso"
TAG="_MY-DNSHELPER_RULE_"
SPath=$RPath
ifc=0
iac=0
ihc=0

[ "$S" = "1" ] && SPath=$EPath/Rules
[ -z "$FWI" ] && FWI="/var/etc/my-dnshelper.include"

[ -n "$dnslogpath" ] && dnsmasqlog="$dnslogpath"
[ -z "$dnslogsize" ] && dnslogsize="10485760"
[ -z "$UPD" ] && UPD="12"

countf="$SPath/count.txt"
mdhpconf="$SPath/01.mdhp.conf"
updatelog="$SPath/my-dnshelper.updated"
dohconfig="/etc/config/https-dns-proxy"
resolvconf="$EPath/resolv.dnsmasq.conf"


check_lock(){
	local hy=0
	local hp=0
	ls $LOCK > /dev/null 2>&1 && hy=1
	pgrep -f "rulesmaker" && hp=1

	if [ $hy -eq 1 -a $hp -eq 0 ];then
		rm -f $LOCK
	fi
}

rs_dnsmasq(){
	/etc/init.d/dnsmasq reload >/dev/null 2>&1
	[ "$AT" = "1" ] || return 0
	echo "`eval $D` Checking DNS..." >> $Logfile
	sh /usr/share/my-dnshelper/testdns
	local R=$?
	if [ $R == 1 ];then
		echo "`eval $D` DNS Check ERROR"
		echo "`eval $D` DNS Check ERROR. Please check your rules or your system." >> $Logfile
		rm -rf $LPath/*
		/etc/init.d/dnsmasq restart >/dev/null 2>&1
	fi
	echo "`eval $D` Checking DNS done." >> $Logfile
}

sort_file(){
	[ -s ${1} ] || return
	echo "`sort -u ${1} 2>/dev/null`" > ${1}
}

read_count(){
	if [ -s $countf ];then
		ifc=`cat $countf 2>/dev/null | cut -d ',' -f 1`
		iac=`cat $countf 2>/dev/null | cut -d ',' -f 2`
		ihc=`cat $countf 2>/dev/null | cut -d ',' -f 3`
		[ -z "$ifc" ] && ifc=0
		[ -z "$iac" ] && iac=0
		[ -z "$ihc" ] && ihc=0
	fi
}

get_count(){
	if [ -s ${1} ]; then
		local hv=0
		hv=`sed -r "/^$/d" ${1} | grep -c -E ".*" 2>/dev/null`
		[ -n "$hv" ] && echo "$hv" || echo "0"
	else
		echo "0"
	fi
}

clean_wfiles(){
	[ -d $LPath ] && rm -rf $LPath/*
	[ -f $helperconf ] && rm -f $helperconf
}

extract_rules(){
		echo "*$1"
		iptables-save -t $1 | grep my-dnshelper |
			sed -e "s/^-A \(OUTPUT\|FORWARD\)/-I \1 1/"
		echo 'COMMIT'
}

init_fwi(){
	echo '#!/bin/sh' > $FWI
}

get_include(){
	init_fwi

	cat <<-EOF >> $FWI
	iptables-save -c | grep -v my-dnshelper | iptables-restore -c
	iptables-restore -n <<-EOT
	$(extract_rules filter)
	EOT
EOF
}

clear_iprule(){
	iptables -D FORWARD -m set --match-set myipdrop dst -m comment --comment "$TAG" -j DROP 2>/dev/null
	iptables -D OUTPUT -m set --match-set myipdrop dst -m comment --comment "$TAG" -j DROP 2>/dev/null
	ipset destroy myipdrop 2>/dev/null
	init_fwi
}

add_iprule(){
	ipset create myipdrop hash:net 2>/dev/null
	for i in $(cat $EPath/ip.mdhp);do ipset -! add myipdrop $i;done
	iptables -I FORWARD -m set --match-set myipdrop dst -m comment --comment "$TAG" -j DROP
	iptables -I OUTPUT -m set --match-set myipdrop dst -m comment --comment "$TAG" -j DROP
	get_include
}

ping_ip(){
	local ok=1
	ping -c 1 $1 >/dev/null 2>&1 && ok=0
	echo $ok
}

get_ports_cfg(){
	echo `grep "listen_port" $dohconfig |grep -oE "\d+" |sort -u`
}

get_ports_ps(){
	ps w 2>/dev/null | grep "https-dns-proxy" | grep -oE "\-p\s+\d+"|grep -oE "\d+"|sort -u
}

get_ports(){
	local pt=$(get_ports_ps)
	[ -z "$pt" ] && pt=$(get_ports_cfg)
	echo "$pt"
}

get_nserver_cfg(){
	local c=0
	local nr=""
	local nr1=""
	local num=$(grep -c "config https-dns-proxy" $dohconfig 2>/dev/null)
	[ -z "$num" ] && num=0
	while [ $c -lt $num ];
	do
		nr1="$(uci -q get https-dns-proxy.@https-dns-proxy[$c].listen_addr)"
		nr="$nr1#`uci -q get https-dns-proxy.@https-dns-proxy[$c].listen_port`"
		let c++
		[ -n "$nr1" ] && echo "$nr"
	done
}

get_dnsmasqcfg(){
	local sr="/tmp/etc/dnsmasq.conf.cfg01411c"
	[ -d "/var/etc" ] || return
	for file in /var/etc/*; do
		if [ -f $file ]; then
			if [ `echo $file | grep 'dnsmasq.conf.cfg' -c` -gt 0 ]; then
				sr="$file"
			fi
		fi
	done
	echo "$sr"
}

get_rautoc(){
	local sr="$(uci -q get dhcp.@dnsmasq[0].resolvfile)"
	if [ -z $sr ]; then
		for s in `cat $(get_dnsmasqcfg)`;do
			sr=`echo $s | grep -oE "^resolv-file=\S+" | cut -d "=" -f2`
			[ -n "$sr" ] && break
		done
	fi
	if [ -f "$sr" ]; then
		echo "$sr"
	else
		if [ -f "/tmp/resolv.conf.d/resolv.conf.auto" ];then
			echo "/tmp/resolv.conf.d/resolv.conf.auto"
		else
			echo ""
		fi
	fi
}

set_DPath(){
	local dc=0
	[ ! -d $DPath ] || mkdir -p $DPath
	for s in `cat $(get_dnsmasqcfg)`;do
		dc=`echo $s | grep "^conf-dir=$DPath" -c`
		[ $dc -gt 0 ] && return 0
	done

	sed -i -r "/^conf-dir=/d" /etc/dnsmasq.conf
	echo "conf-dir=$DPath" >> /etc/dnsmasq.conf
	return 1
}

clear_doh(){
	[ -f $dohconfig ] || return 0
	sed -i "/doh_backup_/d"  /etc/config/dhcp
	local num=$(grep -c "config https-dns-proxy" $dohconfig 2>/dev/null)
	[ -z "$num" ] && num=0
	local c=0
	while [ $c -lt $num ];
	do
		let c++
		uci -q delete https-dns-proxy.@https-dns-proxy[-1] 2>/dev/null
		[ $? -ne 0 ] && break
	done
	uci commit https-dns-proxy
}

chmod_files(){
	local rautoc=$(get_rautoc)
	[ -d $SPath ] && chmod 0774 $SPath/* >/dev/null 2>&1
	[ -d $LPath ] && chmod 0777 $LPath/* >/dev/null 2>&1
	[ -f $helperconf ] && chmod 0664 $helperconf >/dev/null 2>&1
	[ -f $resolvconf ] && chmod 0664 $resolvconf >/dev/null 2>&1
	[ -f $rautoc ] && chmod 0664 $rautoc >/dev/null 2>&1
}

check_masq53(){
	local a=`netstat -nutlp 2>/dev/null | grep "dnsmasq"| grep "udp"| grep ":53\s" -c`
	if [ "$a" == "0" -o -z "$a" ];then
		echo "1"
	else
		echo "0"
	fi
}

check_ln(){
	local n=0
	[ -s $SPath/rules.conf -a ! -s $LPath/rules.conf ] && n=1
	[ -s $SPath/hosts.conf -a ! -s $LPath/hosts.conf ] && n=1
	[ -s $SPath/user.conf -a ! -s $LPath/user.conf ] && n=1
	[ -s $SPath/uhosts.conf -a ! -s $LPath/uhosts.conf ] && n=1
	[ -s $mdhpconf -a ! -s $LPath/01.mdhp.conf ] && n=1
	echo $n
}
